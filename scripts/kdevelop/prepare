#!/bin/sh
set -e
prefix=$HOME
src_dir=$prefix/src/kde/kdevelop
trunk_dir=$src_dir/trunk
mkdir -p "$trunk_dir"

clone()
{
    echo -n "Cloning into $2... "
    git clone -q "$1" "$2"
    echo "done!"
}

copy()
{
    echo -n "Copying into $2/$3... "
    cp -at "$2" "$1"
    echo "done!"
}

script()
{
    cat > "$1"
    chmod +x "$1"
}

script "$src_dir/cmake.sh" << 'EOF'
#!/bin/bash
src_dir=$(readlink -ne "${@: -1}")
opt_dir=$(readlink -f "$src_dir/../opt")
export KDevPlatform_DIR="$opt_dir"

unset opt_ccache
if [ -x $(which ccache) ]
then
    opt_ccache="-DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache"
fi

unset opt_ninja
if [ -x $(which ninja) ]
then
    opt_ninja="-GNinja"
fi

unset opt_clang
if [ -x $(which clang) ]
then
    opt_clang="-DCMAKE_CXX_COMPILER=/usr/bin/clang++ -DCMAKE_C_COMPILER=/usr/bin/clang"
fi

unset opt_llvm
if [ -x $(which llvm-ar-5.0) ]
then
    opt_llvm="-D_CMAKE_TOOLCHAIN_PREFIX=llvm- -D_CMAKE_TOOLCHAIN_SUFFIX=-5.0"
fi

cmake-ln \
-Wno-dev \
-DCMAKE_INSTALL_PREFIX:PATH="$opt_dir" \
-DCMAKE_BUILD_TYPE:STRING=debugfull \
-DCMAKE_CXX_FLAGS:STRING="-g -O0" \
-DCMAKE_C_FLAGS:STRING="-g -O0" \
$opt_ccache $opt_ninja $opt_clang $opt_llvm \
"$@"
EOF

script "$src_dir/kdevelop.sh" << 'EOF'
#!/bin/bash
[[ $_ != $0 ]] && me=${BASH_SOURCE[0]} || me=$0
me=$(readlink -f "$me")
src_dir=$(dirname "$me")
optdir=$src_dir/$1/opt
shift
export KDEDIRS=$optdir
export KDEV_DISABLE_SPLASH=1
kbuildsycoca4 &> /dev/null
$optdir/bin/kdevelop "$@"
EOF

sources()
{
    dst_dir="$1"
    cmd="$2"
    copy_from="$3"

    for product in kdevelop kdevplatform
    do
        product_dir="$dst_dir/$product"
        [ -d "$product_dir" ] ||
            if [ "$cmd" = "clone" ]; then
                clone git://anongit.kde.org/$product "$product_dir"
            else
                copy "$copy_from/$product" "$dst_dir" "$product"
            fi

        build_dir="$dst_dir/${product}.build"
        mkdir -p "$build_dir"
        cmake_sh="$build_dir/cmake.sh"
        [ -h "$cmake_sh" ] &&
            rm -f "$cmake_sh"
        ln -s "$src_dir/cmake.sh" "$cmake_sh"
    done
}

checkout_branch()
{
    if [ -f .git/refs/heads/stable ]
    then
        git checkout master
        git branch -d stable
    fi
    git checkout -b stable remotes/origin/${1}
}

sources "$trunk_dir" clone

stable_dir=$src_dir/stable
mkdir -p "$stable_dir"

sources "$stable_dir" copy "$trunk_dir"

(
    cd "$stable_dir/kdevelop"
    checkout_branch 5.1
    cd "$stable_dir/kdevplatform"
    checkout_branch 5.1
)
